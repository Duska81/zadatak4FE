{"ast":null,"code":"// eslint-disable-next-line\nimport React from 'react';\n\nconst PasswordScore = ({\n  score\n}) => {\n  /*const getText = () => {\n    if (score >= 60) {\n       return 'orange'\n      \n      \n        }\n      else if (score > 30) {\n      return 'orange'\n    }\n     return 'orangered'\n  }\n   return (\n    <div className=\"pass-score\" title={`Password is ${score}% valid`}>\n      <div\n        className=\"score\"\n        style={{\n          width: `${score}%`,\n          backgroundColor: getText()\n        }}\n      />\n    </div>\n  )\n  }\n  export default PasswordScore*/\n  // Validate lowercase letters\n  let lowercases = /[a-z]/g;\n\n  if (PasswordScore.value.match(lowercases)) {\n    lowercases.classList.remove(\"invalid\");\n    lowercases.classList.add(\"valid\");\n  } else {\n    lowercases.classList.remove(\"valid\");\n    lowercases.classList.add(\"invalid\");\n  } // Validate capital letters\n\n\n  let uppercases = /[A-Z]/g;\n\n  if (PasswordScore.value.match(uppercases)) {\n    uppercases.classList.remove(\"invalid\");\n    uppercases.classList.add(\"valid\");\n  } else {\n    uppercases.classList.remove(\"valid\");\n    uppercases.classList.add(\"invalid\");\n  } // Validate numbers\n\n\n  let digit = /[0-9]/g;\n\n  if (PasswordScore.value.match(digit)) {\n    digit.classList.remove(\"invalid\");\n    digit.classList.add(\"valid\");\n  } else {\n    digit.classList.remove(\"valid\");\n    digit.classList.add(\"invalid\");\n  }\n};\n\n_c = PasswordScore;\nexport default PasswordScore;\n\nvar _c;\n\n$RefreshReg$(_c, \"PasswordScore\");","map":{"version":3,"sources":["/home/duska/Desktop/zadatak4/library/src/login/PasswordScore.js"],"names":["React","PasswordScore","score","lowercases","value","match","classList","remove","add","uppercases","digit"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAEnC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAME;AACA,MAAIC,UAAU,GAAG,QAAjB;;AACA,MAAGF,aAAa,CAACG,KAAd,CAAoBC,KAApB,CAA0BF,UAA1B,CAAH,EAA0C;AACxCA,IAAAA,UAAU,CAACG,SAAX,CAAqBC,MAArB,CAA4B,SAA5B;AACAJ,IAAAA,UAAU,CAACG,SAAX,CAAqBE,GAArB,CAAyB,OAAzB;AACD,GAHD,MAGO;AACLL,IAAAA,UAAU,CAACG,SAAX,CAAqBC,MAArB,CAA4B,OAA5B;AACAJ,IAAAA,UAAU,CAACG,SAAX,CAAqBE,GAArB,CAAyB,SAAzB;AACD,GAvCkC,CAyCnC;;;AACA,MAAIC,UAAU,GAAG,QAAjB;;AACA,MAAGR,aAAa,CAACG,KAAd,CAAoBC,KAApB,CAA0BI,UAA1B,CAAH,EAA0C;AACxCA,IAAAA,UAAU,CAACH,SAAX,CAAqBC,MAArB,CAA4B,SAA5B;AACAE,IAAAA,UAAU,CAACH,SAAX,CAAqBE,GAArB,CAAyB,OAAzB;AACD,GAHD,MAGO;AACLC,IAAAA,UAAU,CAACH,SAAX,CAAqBC,MAArB,CAA4B,OAA5B;AACAE,IAAAA,UAAU,CAACH,SAAX,CAAqBE,GAArB,CAAyB,SAAzB;AACD,GAjDkC,CAmDnC;;;AACA,MAAIE,KAAK,GAAG,QAAZ;;AACA,MAAGT,aAAa,CAACG,KAAd,CAAoBC,KAApB,CAA0BK,KAA1B,CAAH,EAAqC;AACnCA,IAAAA,KAAK,CAACJ,SAAN,CAAgBC,MAAhB,CAAuB,SAAvB;AACAG,IAAAA,KAAK,CAACJ,SAAN,CAAgBE,GAAhB,CAAoB,OAApB;AACD,GAHD,MAGO;AACLE,IAAAA,KAAK,CAACJ,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB;AACAG,IAAAA,KAAK,CAACJ,SAAN,CAAgBE,GAAhB,CAAoB,SAApB;AACD;AAGF,CA9DD;;KAAMP,a;AA+DJ,eAAeA,aAAf","sourcesContent":["// eslint-disable-next-line\nimport React from 'react'\n\nconst PasswordScore = ({ score }) => {\n\n  /*const getText = () => {\n    if (score >= 60) {\n       return 'orange'\n      \n\n     \n        }\n      else if (score > 30) {\n      return 'orange'\n    }\n\n    return 'orangered'\n  }\n\n  return (\n    <div className=\"pass-score\" title={`Password is ${score}% valid`}>\n      <div\n        className=\"score\"\n        style={{\n          width: `${score}%`,\n          backgroundColor: getText()\n        }}\n      />\n    </div>\n  )\n}\n\nexport default PasswordScore*/\n\n  // Validate lowercase letters\n  let lowercases = /[a-z]/g;\n  if(PasswordScore.value.match(lowercases)) {  \n    lowercases.classList.remove(\"invalid\");\n    lowercases.classList.add(\"valid\");\n  } else {\n    lowercases.classList.remove(\"valid\");\n    lowercases.classList.add(\"invalid\");\n  }\n  \n  // Validate capital letters\n  let uppercases = /[A-Z]/g;\n  if(PasswordScore.value.match(uppercases)) {  \n    uppercases.classList.remove(\"invalid\");\n    uppercases.classList.add(\"valid\");\n  } else {\n    uppercases.classList.remove(\"valid\");\n    uppercases.classList.add(\"invalid\");\n  }\n\n  // Validate numbers\n  let digit = /[0-9]/g;\n  if(PasswordScore.value.match(digit)) {  \n    digit.classList.remove(\"invalid\");\n    digit.classList.add(\"valid\");\n  } else {\n    digit.classList.remove(\"valid\");\n    digit.classList.add(\"invalid\");\n  }\n  \n  \n}\n  export default PasswordScore\n"]},"metadata":{},"sourceType":"module"}