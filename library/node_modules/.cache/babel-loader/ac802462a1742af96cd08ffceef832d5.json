{"ast":null,"code":"var _jsxFileName = \"/home/duska/Desktop/zadatak4/library/src/login/PasswordScore.js\",\n    _s = $RefreshSig$();\n\n// eslint-disable-next-line\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PasswordScore = () => {\n  _s();\n\n  const [getPassword, setPassword] = React.useReact(\"\");\n  const [getBarStatus, setBarStatus] = React.useState(false);\n  let len = getPassword.length / 30 * 100;\n\n  let color = () => {\n    if (getPassword.length < 8) {\n      return \"bg-danger\";\n    } else if (getPassword.length <= 12) {\n      return \"bg-warning\";\n    } else if (getPassword.length <= 18) {\n      return \"bg-info\";\n    } else {\n      return \"bg-success\";\n    }\n  };\n\n  const renderBar = () => {\n    if (getBarStatus === true) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `progress-bar ${color()}`,\n            role: \"progressbar\",\n            style: {\n              width: `${len}%`\n            } // eslint-disable-next-line\n            ,\n            \"aria-valuenow\": `${len}`,\n            \"aria-valuemin\": \"0\",\n            \"aria-valuemax\": \"100\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"The progress is based on password length, however you can easily implement your own logic. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 103\n          }, this), \" This code isn't refactored\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this);\n    }\n\n    return null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"container-sm form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Start entering some text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"password\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        id: \"password\",\n        className: \"form-control\",\n        value: getPassword,\n        minLength: 8,\n        maxLength: 30,\n        onChange: event => setPassword(event.target.value),\n        onClick: () => setBarStatus(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), getBarStatus === true ? renderBar() : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PasswordScore, \"PanztU32UdPNU59QoZzgeWggY2A=\", false, function () {\n  return [React.useReact];\n});\n\n_c = PasswordScore;\nexport default PasswordScore;\n\nvar _c;\n\n$RefreshReg$(_c, \"PasswordScore\");","map":{"version":3,"sources":["/home/duska/Desktop/zadatak4/library/src/login/PasswordScore.js"],"names":["React","PasswordScore","getPassword","setPassword","useReact","getBarStatus","setBarStatus","useState","len","length","color","renderBar","width","event","target","value"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,aAAa,GAAC,MAAK;AAAA;;AACvB,QAAM,CAACC,WAAD,EAAcC,WAAd,IAA6BH,KAAK,CAACI,QAAN,CAAe,EAAf,CAAnC;AACA,QAAM,CAACC,YAAD,EAAeC,YAAf,IAA+BN,KAAK,CAACO,QAAN,CAAe,KAAf,CAArC;AACA,MAAIC,GAAG,GAAGN,WAAW,CAACO,MAAZ,GAAqB,EAArB,GAA0B,GAApC;;AACA,MAAIC,KAAK,GAAG,MAAM;AAChB,QAAGR,WAAW,CAACO,MAAZ,GAAqB,CAAxB,EAA2B;AACzB,aAAO,WAAP;AACD,KAFD,MAEO,IAAGP,WAAW,CAACO,MAAZ,IAAsB,EAAzB,EAA6B;AAClC,aAAO,YAAP;AACD,KAFM,MAEA,IAAGP,WAAW,CAACO,MAAZ,IAAsB,EAAzB,EAA6B;AAClC,aAAO,SAAP;AACD,KAFM,MAEA;AACL,aAAO,YAAP;AACD;AACF,GAVD;;AAWA,QAAME,SAAS,GAAG,MAAM;AACtB,QAAGN,YAAY,KAAK,IAApB,EAA0B;AACxB,0BACE;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,iCACF;AACE,YAAA,SAAS,EAAG,gBAAeK,KAAK,EAAG,EADrC;AAEE,YAAA,IAAI,EAAC,aAFP;AAGE,YAAA,KAAK,EAAE;AAACE,cAAAA,KAAK,EAAG,GAAEJ,GAAI;AAAf,aAHT,CAIE;AAJF;AAKE,6BAAgB,GAAEA,GAAI,EALxB;AAME,6BAAc,GANhB;AAOE,6BAAc;AAPhB;AAAA;AAAA;AAAA;AAAA;AADE;AAAA;AAAA;AAAA;AAAA,gBADF,eAYE;AAAA;AAAA;AAAA;AAAA,gBAZF,eAaA;AAAA,iIAA8F;AAAA;AAAA;AAAA;AAAA,kBAA9F;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAkBD;;AACD,WAAO,IAAP;AACD,GAtBD;;AAuBA,sBACE;AAAM,IAAA,SAAS,EAAC,mBAAhB;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACE;AAAO,QAAA,GAAG,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,EAAE,EAAC,UAA1B;AAAqC,QAAA,SAAS,EAAC,cAA/C;AACE,QAAA,KAAK,EAAEN,WADT;AAEE,QAAA,SAAS,EAAE,CAFb;AAGE,QAAA,SAAS,EAAE,EAHb;AAIE,QAAA,QAAQ,EAAGW,KAAD,IAAWV,WAAW,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAd,CAJlC;AAKE,QAAA,OAAO,EAAE,MAAMT,YAAY,CAAC,IAAD;AAL7B;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAYGD,YAAY,KAAK,IAAjB,GAAuBM,SAAS,EAAhC,GAAqC,IAZxC;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAtDD;;GAAMV,a;UAC+BD,KAAK,CAACI,Q;;;KADrCH,a;AAuDN,eAAeA,aAAf","sourcesContent":["// eslint-disable-next-line\nimport React from 'react'\n\nconst PasswordScore=() =>{\n  const [getPassword, setPassword] = React.useReact(\"\")\n  const [getBarStatus, setBarStatus] = React.useState(false)\n  let len = getPassword.length / 30 * 100;\n  let color = () => {\n    if(getPassword.length < 8) {\n      return \"bg-danger\"\n    } else if(getPassword.length <= 12) {\n      return \"bg-warning\"\n    } else if(getPassword.length <= 18) {\n      return \"bg-info\"\n    } else {\n      return \"bg-success\"\n    }\n  }\n  const renderBar = () => {\n    if(getBarStatus === true) {\n      return(\n        <div>\n          <div className=\"progress\">\n        <div \n          className={`progress-bar ${color()}`}\n          role=\"progressbar\" \n          style={{width: `${len}%`}}\n          // eslint-disable-next-line\n          aria-valuenow={`${len}`} \n          aria-valuemin=\"0\" \n          aria-valuemax=\"100\"\n          />\n      </div>\n          <br/>\n        <p>The progress is based on password length, however you can easily implement your own logic. <br /> This code isn't refactored</p>\n        </div>\n      \n    )\n    }\n    return null;\n  }\n  return (\n    <form className=\"container-sm form\">\n      <h2>Start entering some text</h2>\n      <div className=\"form-group\">\n        <label for=\"password\">Password</label>\n        <input type=\"password\" id=\"password\" className=\"form-control\"\n          value={getPassword}\n          minLength={8}\n          maxLength={30}\n          onChange={(event) => setPassword(event.target.value)}\n          onClick={() => setBarStatus(true)}\n        />\n      </div>\n      {getBarStatus === true? renderBar() : null}\n    </form>\n  )\n}\nexport default PasswordScore\n"]},"metadata":{},"sourceType":"module"}