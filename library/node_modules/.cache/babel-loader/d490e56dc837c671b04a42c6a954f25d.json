{"ast":null,"code":"import React from 'react';\n\nconst PasswordScore = ({\n  score\n}) => {\n  /*const getText = () => {\n    if (score >= 60) {\n       return 'orange'\n      \n      \n        }\n      else if (score > 30) {\n      return 'orange'\n    }\n     return 'orangered'\n  }\n   return (\n    <div className=\"pass-score\" title={`Password is ${score}% valid`}>\n      <div\n        className=\"score\"\n        style={{\n          width: `${score}%`,\n          backgroundColor: getText()\n        }}\n      />\n    </div>\n  )\n  }\n  export default PasswordScore*/\n  // Validate lowercase letters\n  let lowerCaseLetters = /[a-z]/g;\n\n  if (PasswordScore.value.match(lowerCaseLetters)) {\n    letter.classList.remove(\"invalid\");\n    letter.classList.add(\"valid\");\n  } else {\n    letter.classList.remove(\"valid\");\n    letter.classList.add(\"invalid\");\n  } // Validate capital letters\n\n\n  let uppercases = /[A-Z]/g;\n\n  if (PasswordScore.value.match(uppercases)) {\n    uppercases.classList.remove(\"invalid\");\n    uppercases.classList.add(\"valid\");\n  } else {\n    uppercases.classList.remove(\"valid\");\n    uppercases.classList.add(\"invalid\");\n  } // Validate numbers\n\n\n  let numbers = /[0-9]/g;\n\n  if (myInput.value.match(numbers)) {\n    number.classList.remove(\"invalid\");\n    number.classList.add(\"valid\");\n  } else {\n    number.classList.remove(\"valid\");\n    number.classList.add(\"invalid\");\n  } // Validate length\n\n\n  if (PasswordScore.value.length >= 8) {\n    length.classList.remove(\"invalid\");\n    length.classList.add(\"valid\");\n  } else {\n    length.classList.remove(\"valid\");\n    length.classList.add(\"invalid\");\n  }\n};\n\n_c = PasswordScore;\nexport default PasswordScore;\n\nvar _c;\n\n$RefreshReg$(_c, \"PasswordScore\");","map":{"version":3,"sources":["/home/duska/Desktop/zadatak4/library/src/login/PasswordScore.js"],"names":["React","PasswordScore","score","lowerCaseLetters","value","match","letter","classList","remove","add","uppercases","numbers","myInput","number","length"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAEnC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAME;AACA,MAAIC,gBAAgB,GAAG,QAAvB;;AACA,MAAGF,aAAa,CAACG,KAAd,CAAoBC,KAApB,CAA0BF,gBAA1B,CAAH,EAAgD;AAC9CG,IAAAA,MAAM,CAACC,SAAP,CAAiBC,MAAjB,CAAwB,SAAxB;AACAF,IAAAA,MAAM,CAACC,SAAP,CAAiBE,GAAjB,CAAqB,OAArB;AACD,GAHD,MAGO;AACLH,IAAAA,MAAM,CAACC,SAAP,CAAiBC,MAAjB,CAAwB,OAAxB;AACAF,IAAAA,MAAM,CAACC,SAAP,CAAiBE,GAAjB,CAAqB,SAArB;AACD,GAvCkC,CAyCnC;;;AACA,MAAIC,UAAU,GAAG,QAAjB;;AACA,MAAGT,aAAa,CAACG,KAAd,CAAoBC,KAApB,CAA0BK,UAA1B,CAAH,EAA0C;AACxCA,IAAAA,UAAU,CAACH,SAAX,CAAqBC,MAArB,CAA4B,SAA5B;AACAE,IAAAA,UAAU,CAACH,SAAX,CAAqBE,GAArB,CAAyB,OAAzB;AACD,GAHD,MAGO;AACLC,IAAAA,UAAU,CAACH,SAAX,CAAqBC,MAArB,CAA4B,OAA5B;AACAE,IAAAA,UAAU,CAACH,SAAX,CAAqBE,GAArB,CAAyB,SAAzB;AACD,GAjDkC,CAmDnC;;;AACA,MAAIE,OAAO,GAAG,QAAd;;AACA,MAAGC,OAAO,CAACR,KAAR,CAAcC,KAAd,CAAoBM,OAApB,CAAH,EAAiC;AAC/BE,IAAAA,MAAM,CAACN,SAAP,CAAiBC,MAAjB,CAAwB,SAAxB;AACAK,IAAAA,MAAM,CAACN,SAAP,CAAiBE,GAAjB,CAAqB,OAArB;AACD,GAHD,MAGO;AACLI,IAAAA,MAAM,CAACN,SAAP,CAAiBC,MAAjB,CAAwB,OAAxB;AACAK,IAAAA,MAAM,CAACN,SAAP,CAAiBE,GAAjB,CAAqB,SAArB;AACD,GA3DkC,CA6DnC;;;AACA,MAAGR,aAAa,CAACG,KAAd,CAAoBU,MAApB,IAA8B,CAAjC,EAAoC;AAClCA,IAAAA,MAAM,CAACP,SAAP,CAAiBC,MAAjB,CAAwB,SAAxB;AACAM,IAAAA,MAAM,CAACP,SAAP,CAAiBE,GAAjB,CAAqB,OAArB;AACD,GAHD,MAGO;AACLK,IAAAA,MAAM,CAACP,SAAP,CAAiBC,MAAjB,CAAwB,OAAxB;AACAM,IAAAA,MAAM,CAACP,SAAP,CAAiBE,GAAjB,CAAqB,SAArB;AACD;AACF,CArED;;KAAMR,a;AAsEJ,eAAeA,aAAf","sourcesContent":["import React from 'react'\n\nconst PasswordScore = ({ score }) => {\n\n  /*const getText = () => {\n    if (score >= 60) {\n       return 'orange'\n      \n\n     \n        }\n      else if (score > 30) {\n      return 'orange'\n    }\n\n    return 'orangered'\n  }\n\n  return (\n    <div className=\"pass-score\" title={`Password is ${score}% valid`}>\n      <div\n        className=\"score\"\n        style={{\n          width: `${score}%`,\n          backgroundColor: getText()\n        }}\n      />\n    </div>\n  )\n}\n\nexport default PasswordScore*/\n\n  // Validate lowercase letters\n  let lowerCaseLetters = /[a-z]/g;\n  if(PasswordScore.value.match(lowerCaseLetters)) {  \n    letter.classList.remove(\"invalid\");\n    letter.classList.add(\"valid\");\n  } else {\n    letter.classList.remove(\"valid\");\n    letter.classList.add(\"invalid\");\n  }\n  \n  // Validate capital letters\n  let uppercases = /[A-Z]/g;\n  if(PasswordScore.value.match(uppercases)) {  \n    uppercases.classList.remove(\"invalid\");\n    uppercases.classList.add(\"valid\");\n  } else {\n    uppercases.classList.remove(\"valid\");\n    uppercases.classList.add(\"invalid\");\n  }\n\n  // Validate numbers\n  let numbers = /[0-9]/g;\n  if(myInput.value.match(numbers)) {  \n    number.classList.remove(\"invalid\");\n    number.classList.add(\"valid\");\n  } else {\n    number.classList.remove(\"valid\");\n    number.classList.add(\"invalid\");\n  }\n  \n  // Validate length\n  if(PasswordScore.value.length >= 8) {\n    length.classList.remove(\"invalid\");\n    length.classList.add(\"valid\");\n  } else {\n    length.classList.remove(\"valid\");\n    length.classList.add(\"invalid\");\n  }\n}\n  export default PasswordScore\n"]},"metadata":{},"sourceType":"module"}